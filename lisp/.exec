amixer.el:
(defvar amixer-program  
(executable-find "amixer")
amixer.el:
(defvar alsactl-program  
(executable-find "alsactl")
dtk-speak.el:           
(and 
(not 
(executable-find "pulseaudio")) ;pipewire-alsa
dtk-speak.el:            
(executable-find "pamixer")
dtk-speak.el:   
(
(executable-find "pulseaudio") "PULSE_SINK")
emacspeak-comint.el:      
(
(z 
(executable-find "zoxide"))
emacspeak-dbus.el:   
(when 
(executable-find "orca")
emacspeak-dired.el:  
(cl-assert 
(executable-find "soxi")
emacspeak-epub.el:  
(cond 
(
(executable-find "unzip") 
(executable-find "unzip") )
emacspeak-epub.el:  
(executable-find "wget")
emacspeak-epub.el:  
(cond 
(
(executable-find "zipinfo") "zipinfo")
emacspeak-epub.el:  
(executable-find "find")
emacspeak-epub.el:  
(eval-when-compile 
(executable-find "sqlite3"))
emacspeak-eww.el:                                        ;
(executable-find "mpv")
emacspeak-eww.el:
(defvar emacspeak-eww-yt-dl 
(executable-find "youtube-dl")
emacspeak-extras.el:  
(cl-assert 
(executable-find "mscore") t "Install mscore first")
emacspeak-extras.el:           
(executable-find "mscore")
emacspeak-loaddefs.el:
(defvar emacspeak-m-player-program 
(executable-find "mplayer") "\
emacspeak-loaddefs.el:
(defvar emacspeak-mpv-program 
(executable-find "mpv") "\
emacspeak-loaddefs.el:
(defvar emacspeak-curl-program 
(executable-find "curl") "\
emacspeak-maths.el:      
(executable-find "node")))
emacspeak-maths.el:   
(
(executable-find "node") 
(executable-find "node")) 
emacspeak-m-player.el:  
(executable-find "mplayer")
emacspeak-m-player.el:  
(executable-find "youtube-dl")
emacspeak-ocr.el:  
(executable-find "mogrify")
emacspeak-preamble.el:
(defvar emacspeak-mpv-program 
(executable-find "mpv")
emacspeak-preamble.el:
(defvar emacspeak-curl-program 
(executable-find "curl")
emacspeak-sounds.el:        
(if 
(string= emacspeak-play-program 
(executable-find "pactl"))
emacspeak-sounds.el:  
(when 
(string= emacspeak-play-program 
(executable-find "pactl"))
emacspeak-sounds.el:             
(executable-find "pacmd") theme)))
emacspeak-sounds.el:   
(executable-find "aplay")
emacspeak-sounds.el:   
(executable-find "paplay")
emacspeak-sounds.el:   
(executable-find "play")
emacspeak-sounds.el:   
(executable-find "pactl"))
emacspeak-sounds.el:       
(
(string= 
(executable-find "pactl") val)
emacspeak-sounds.el:       
(
(string= 
(executable-find "paplay") val)
emacspeak-sounds.el:       
(
(string= 
(executable-find "aplay") val)
emacspeak-sounds.el:       
(
(string= 
(executable-find "play") val)
emacspeak-sounds.el:
(defvar emacspeak-sox 
(executable-find "sox")
emacspeak-speak.el:     
(
(executable-find "wpctl") ; pipewire
emacspeak-speak.el:  
(let* 
(
(emacspeak-speak-show-volume 
(executable-find "amixer"))
emacspeak-speak.el:    
(if 
(and 
(executable-find "git")
emacspeak-xslt.el:  
(executable-find "xsltproc")
g-utils.el:
(defvar g-curl-program 
(executable-find "curl")
ladspa.el:  
(executable-find "analyseplugin")
light.el:  
(executable-find "light")
soundscape.el:
(defconst soundscape-player 
(executable-find "boodler")
soundscape.el:
(defconst soundscape-mgr 
(executable-find "boodle-mgr")
sox.el:  
(executable-find "sox")
sox.el:
(defvar sox-play 
(executable-find "play")
sox-gen.el:  
(eval-when-compile 
(executable-find "sox"))
sox-gen.el:
(defvar sox-gen-play 
(executable-find "play")
xbacklight.el:  
(executable-find "xbacklight")
